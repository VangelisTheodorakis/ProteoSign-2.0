description <- lapply(description, function(line) paste("# ", line, sep = ""))
print(file.name)
write(unlist(description), file = file.to.write, sep = "\n")
}
invisible( apply(file_descriptions, 1, fill.r.scripts, here("src")))
The R scripts to be created
files.to.create <- c("main.R",
"functions.R",
"explore.R",
"initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R",
"build_ppt.R",
"prepare_markdown.R",
"prepare_shiny.R",
"markdown_report.Rmd",
"shiny_report.Rmd")
try.to.make.files <- function(file.name, path){
new.file.name <- file.path(path, file.name)
unlink(new.file.name)
if( file.exists(new.file.name) == TRUE) {
success <- FALSE
message("File ", file.name, " already exists under ",path, " and was not created.")
}
else {
success <- file.create(new.file.name)
cat("File", file.name, "was created under", paste(path, ".\n", sep = ""))
}
return (success)
}
# Create all the files
invisible( lapply( files.to.create,
try.to.make.files,
here("src")))
file_descriptions.path <- file.path(here(), "file_descriptions.csv")
file_descriptions <- read.csv(file_descriptions.path)
fill.r.scripts <- function(line, path) {
file.name <- line[[1]]
description <- str_wrap(line[[2]], width = 80)
description <- str_split(description, "\n")
print(description)
file.to.write <- file.path(path, file.name)
print(description)
description <- lapply(description, function(line) paste("# ", line, sep = ""))
print(file.name)
write(unlist(description), file = file.to.write, sep = "\n")
}
invisible( apply(file_descriptions, 1, fill.r.scripts, here("src")))
The R scripts to be created
files.to.create <- c("main.R",
"functions.R",
"explore.R",
"initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R",
"build_ppt.R",
"prepare_markdown.R",
"prepare_shiny.R",
"markdown_report.Rmd",
"shiny_report.Rmd")
try.to.make.files <- function(file.name, path){
new.file.name <- file.path(path, file.name)
unlink(new.file.name)
if( file.exists(new.file.name) == TRUE) {
success <- FALSE
message("File ", file.name, " already exists under ",path, " and was not created.")
}
else {
success <- file.create(new.file.name)
cat("File", file.name, "was created under", paste(path, ".\n", sep = ""))
}
return (success)
}
# Create all the files
invisible( lapply( files.to.create,
try.to.make.files,
here("src")))
file_descriptions.path <- file.path(here(), "file_descriptions.csv")
file_descriptions <- read.csv(file_descriptions.path)
fill.r.scripts <- function(line, path) {
file.name <- line[[1]]
description <- str_wrap(line[[2]], width = 80)
description <- str_split(description, "\n")
print(description)
file.to.write <- file.path(path, file.name)
print(description)
description <- lapply(description, function(line) paste("# ", line, sep = ""))
print(file.name)
write(unlist(description), file = file.to.write, sep = "\n")
}
invisible( apply(file_descriptions, 1, fill.r.scripts, here("src")))
check.packages <- function(packages) {
# Checks to see if desired packages are installed and if they are not, it installs them.
# Args:
#   package: A vector of the desired packages
new.packages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if ( length(new.packages) )
install.packages(new.packages, dependencies = TRUE)
}
# Project Packages to be installed
packages <- c("here", "stringr", "rmarkdown")
# Install missing packages
check.packages(packages)
# Load all packages
lapply(packages, require, character.only = TRUE)
# The direcories to be created
dirs.to.create <- c("src",
"data-input",
"data-output",
"info",
"reports")
# For testing purposes
# unlink(dirs.to.create, recursive = TRUE)
handle.dir.warning <- function(warning) {
# Prints a warning message of the warning raised except when the file already exists.
# In this case it prints a custom message
# Args:
#   warning: the warning message
#
# Returns:
#   FALSE
message <- warning[1]
if ( grep('already exists', message) == TRUE ) {
stringr.object <-  str_match(message, "\'(.*)\'")
folder <-stringr.object[, 2]
message("Folder ", folder, " already exists under ", here(), " and was not created.")
return (TRUE)
}
else {
message(warning)
return (FALSE)
}
}
handle.dir.error <- function(error) {
# # Prints an error message of error raised during directory creation.
# Args:
#   error: the error message
#
# Returns:
#   FALSE
cat(error, "\n")
return (FALSE)
}
handle.dir.success <- function(dir) {
# Prints a message of success in stdout in case of successful directory creation.
# Args:
#   dir: the directory name
cat("Folder", dir, "was created under", paste(here(), ".\n", sep = ""))
}
try.to.make.dir <- function(dir, handle.dir.warning, handle.dir.error, handle.dir.success) {
# Tries to make a directory. If not successful it handles the raised error/warning.
# Args:
#   dir: the directory name
#   handle.dir.warning: a function to be called in case of warning
#   handle.dir.error: a function to be called in case of error
#   handle.dir.success: a function to be called in case of success
#
# Returns:
#   TRUE or FALSE based on the fact that the direcory was created or not
#
success <- tryCatch( {
dir.create(dir)
handle.dir.success(dir)
return (TRUE)
},
warning = handle.dir.warning,
error = handle.dir.error)
return ( success )
}
# Create all the directories
invisible( lapply( dirs.to.create,
try.to.make.dir,
handle.dir.warning,
handle.dir.error,
handle.dir.success))
# The R scripts to be created
files.to.create <- c("main.R",
"functions.R",
"explore.R",
"initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R",
"build_ppt.R",
"prepare_markdown.R",
"prepare_shiny.R",
"markdown_report.Rmd",
"shiny_report.Rmd")
try.to.make.files <- function(file.name, path){
new.file.name <- file.path(path, file.name)
unlink(new.file.name)
if( file.exists(new.file.name) == TRUE) {
success <- FALSE
message("File ", file.name, " already exists under ",path, " and was not created.")
}
else {
success <- file.create(new.file.name)
cat("File", file.name, "was created under", paste(path, ".\n", sep = ""))
}
return (success)
}
# Create all the files
invisible( lapply( files.to.create,
try.to.make.files,
here("src")))
file_descriptions.path <- file.path(here(), "file_descriptions.csv")
file_descriptions <- read.csv(file_descriptions.path)
fill.r.scripts <- function(line, path) {
file.name <- line[[1]]
description <- str_wrap(line[[2]], width = 80)
description <- str_split(description, "\n")
print(description)
file.to.write <- file.path(path, file.name)
print(description)
description <- lapply(description, function(line) paste("# ", line, sep = ""))
print(file.name)
write(unlist(description), file = file.to.write, sep = "\n")
}
invisible( apply(file_descriptions, 1, fill.r.scripts, here("src")))
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
file.creation
unlist
unlist(file.creation)
file_descriptions
path
ile_descriptions.path
/home/theodor/Documents/ProteoSign/src/main.R
file.info = file.info("/home/theodor/Documents/ProteoSign/src/main.R")
empty = rownames(info[info$size == 0, ])
empty = rownames(file.info[file.info$size == 0, ])
empty
file.info
file.info$size
file.create("test")
file.info = file.info("/home/theodor/Documents/ProteoSign/test")
file.info$size
file.info$size == FALSE
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
shQuote(main.R)
shQuote("main.R")
shQuote("main.R")
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R', echo=TRUE)
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
file.filling.status
Reduce("&", file.filling.status)
source('~/Documents/ProteoSign/project_initializer.R')
directory.creation.status
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
directory.creation.status
source('~/Documents/ProteoSign/project_initializer.R')
directory.creation.status
file.creation.status
directory.creation.status
source('~/Documents/ProteoSign/project_initializer.R')
directory.creation.status
source('~/Documents/ProteoSign/project_initializer.R')
source('~/Documents/ProteoSign/project_initializer.R')
source("project_initializer.R")
source("project_initializer.R")
source("project_initializer.R")
source("project_initializer.R")
source("project_initializer.R")
source("project_initializer.R")
source("project_initializer.R")
# Sets the current working directory and calls the following scripts:
# initialize.R, load_data.R, pull_data_from_DB.R, build.R, analyze.R
check.packages <- function(packages) {
# Checks to see if desired packages are installed and if they are not, it installs them.
# Args:
#   package: A vector of the desired packages
# Returns:
#   TRUE by default
#
new.packages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if ( length(new.packages) )
install.packages(new.packages, dependencies = TRUE)
return (TRUE)
}
# Project Packages to be installed
packages <- c("here")
# Install missing packages
check.packages(packages)
# Load all packages
invisible(lapply(packages, require, character.only = TRUE))
here()
no.DB <- FALSE
files.to.load <- c( "initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R")
files.to.load <- c( "initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R")
if (no.DB == TRUE) {
files.to.load <- files.to.load[-c(3)]
}
no.DB <- TRUE
files.to.load <- c( "initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R")
if (no.DB == TRUE) {
files.to.load <- files.to.load[-c(3)]
}
successful.run <- unlist(lapply(files, source))
successful.run <- unlist(lapply(files.to.load, source))
here("src")
successful.run <- unlist(lapply(files.to.load, source))
here()
source("initialize.R")
source("src/initialize.R")
source("initialize.R", chdir = TRUE)
here("src")
successful.run <- unlist(lapply(files.to.load, source, local = TRUE, chdir = TRUE))
getwd()
setwd(here("src"))
successful.run <- unlist(lapply(files.to.load, source, local = TRUE, chdir = TRUE))
rm(list=ls())
check.packages <- function(packages) {
# Checks to see if desired packages are installed and if they are not, it installs them.
# Args:
#   package: A vector of the desired packages
# Returns:
#   TRUE by default
#
new.packages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if ( length(new.packages) )
install.packages(new.packages, dependencies = TRUE)
return (TRUE)
}
# Project Packages to be installed
packages <- c("here")
# Install missing packages
check.packages(packages)
# Load all packages
invisible(lapply(packages, require, character.only = TRUE))
#Do I need to use a database for data retrieve
no.DB <- TRUE
# Scripts to call
files.to.load <- c( "initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R")
# Remove database script if not used
if (no.DB == TRUE) {
files.to.load <- files.to.load[-c(3)]
}
# Set the currenct working directory
setwd(here("src"))
# Run the scripts
successful.run <- unlist(lapply(files.to.load, source, local = TRUE, chdir = TRUE))
no.DB <<- TRUE
setdiff(ls())
setdiff(ls(), lsf.str())
get(ls())
str(as.list(.GlobalEnv))
rm(list = ls())
#Do I need to use a database for data retrieve
no.DB <- TRUE
.GlobalEnv[['no.DB']] <- TRUE
.GlobalEnv[['no.DB2']] <- TRUE
rm(list = ls())
# Set it as global so other scipts can also see this
global.variables <- new.env()
# Sets the current working directory and calls the following scripts:
# initialize.R, load_data.R, pull_data_from_DB.R, build.R, analyze.R
# Clear enviroment
rm(list = ls())
check.packages <- function(packages) {
# Checks to see if desired packages are installed and if they are not, it installs them.
# Args:
#   package: A vector of the desired packages
# Returns:
#   TRUE by default
#
new.packages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if ( length(new.packages) )
install.packages(new.packages, dependencies = TRUE)
return (TRUE)
}
# Project Packages to be installed
packages <- c("here")
# Install missing packages
check.packages(packages)
# Load all packages
invisible(lapply(packages, require, character.only = TRUE))
#Do I need to use a database for data retrieve
no.DB <- TRUE
# Set it as global so other scipts can also see this
global.variables <- new.env()
assign("no.DB", TRUE, envir = global.variables)
# Scripts to call
files.to.load <- c( "initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R")
# Remove database script if not used
if (no.DB == TRUE) {
files.to.load <- files.to.load[-c(3)]
}
# Set the currenct working directory
setwd(here("src"))
rm(list = ls())
source('~/Dropbox/ProteoSign/src/main.R', echo=TRUE)
View(global.variables)
env()
globalenv()
# Clear enviroment
rm(grep("^global.variables", ls()), invert = FALSE)
ls()
grep("^global.variables", ls() , invert = FALSE)
rm(list = grep("^global.variables", ls(), value = TRUE, invert = TRUE))
# Sets the current working directory and calls the following scripts:
# initialize.R, load_data.R, pull_data_from_DB.R, build.R, analyze.R
# Clear enviroment
rm(list = ls())
check.packages <- function(packages) {
# Checks to see if desired packages are installed and if they are not, it installs them.
# Args:
#   package: A vector of the desired packages
# Returns:
#   TRUE by default
#
new.packages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if ( length(new.packages) )
install.packages(new.packages, dependencies = TRUE)
return (TRUE)
}
# Project Packages to be installed
packages <- c("here")
# Install missing packages
check.packages(packages)
# Load all packages
invisible(lapply(packages, require, character.only = TRUE))
#Do I need to use a database for data retrieve
no.DB <- TRUE
# Set it as global so other scipts can also see this
global.variables <- list("no.DB" = TRUE)
# Scripts to call
files.to.load <- c( "initialize.R",
"load_data.R",
"pull_data_from_DB.R",
"build.R",
"analyze.R")
# Remove database script if not used
if (no.DB == TRUE) {
files.to.load <- files.to.load[-c(3)]
}
# Set the currenct working directory
setwd(here("src"))
rm(list = grep("^global.variables", ls(), value = TRUE, invert = TRUE))
library()
sessionInfo()
global.variables[["development.stage"]] <- TRUE
# All functions exist in this file. If they are too many, they can be separeted in
# several functions_XXX.R files.
# Clear enviroment
rm(list = grep("^global.variables", ls(), value = TRUE, invert = TRUE))
# Functions scripts to load
functions.subfiles <- c("functions_initialize.R",
"functions_load_data.R",
"functions_pull_data_from_DB.R"
"functions_build.R",
"functions_analyze.R"
)
# If no database is used, do not call the respective script
if (global.variables$no.DB == TRUE) {
functions.subfiles <- functions.subfiles[-c(3)]
}
invisible(lapply(functions.subfiles, source))
# All functions exist in this file. If they are too many, they can be separeted in
# several functions_XXX.R files.
# Clear enviroment
rm(list = grep("^global.variables", ls(), value = TRUE, invert = TRUE))
# Functions scripts to load
functions.subfiles <- c("functions_initialize.R",
"functions_load_data.R",
"functions_pull_data_from_DB.R",
"functions_build.R",
"functions_analyze.R"
)
# If no database is used, do not call the respective script
if (global.variables$no.DB == TRUE) {
functions.subfiles <- functions.subfiles[-c(3)]
}
invisible(lapply(functions.subfiles, source))
